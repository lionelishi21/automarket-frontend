{"remainingRequest":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/babel-loader/lib/index.js!/home/lionel/Projects/vue_app/surkeys_website/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-money-format/src/components/MoneyFormat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-money-format/src/components/MoneyFormat.vue","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLWZpbml0ZSI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogewogICAgdmFsdWU6IE51bWJlciwKICAgIGxvY2FsZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdlbicKICAgIH0sCiAgICBjdXJyZW5jeUNvZGU6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnVVNEJwogICAgfSwKICAgIHN1cHBsZW1lbnRhbFByZWNpc2lvbjogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDAKICAgIH0sCiAgICBzdWJ1bml0c1ZhbHVlOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgc3VidW5pdHNUb1VuaXQ6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAxCiAgICB9LAogICAgaGlkZVN1YnVuaXRzOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIEZvcm1hdCBtb25leSBiYXNlZCBvbiBpbnRlZ2VyIG9yIGZsb2F0aW5nIGlucHV0CiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gUG9zc2libGUgaW5wdXRzIGFyZToKICAgIC8vIHZhbHVlOiAgICAgICAgICAgICAgICAgTnVtZXJpY2FsIGlucHV0IChyZXF1aXJlZCkKICAgIC8vIGxvY2FsZTogICAgICAgICAgICAgICAgTGFuZ3VhZ2UgYW5kIGNvdW50cnkgaW5mb3JtYXRpb24sIHN1Y2ggYXMgJ2VuJyBvciAnZW4tVVMnCiAgICAvLyBjdXJyZW5jeUNvZGU6ICAgICAgICAgIDMtY2hhcmFjdGVyIGNkZGUgZnJvbSBJU08gNDIxNwogICAgLy8gc3VidW5pdHNWYWx1ZTogICAgICAgICBWYWx1ZSBpcyBkZW5vbWluYXRlZCBpbiBzdWJ1bml0cywgc3VjaCBhcyBjZW50cwogICAgLy8gc3VidW5pdHNUb1VuaXRzOiAgICAgICBPdmVycmlkZXMgdGhlIG1pbm9yIHVuaXQgdmFsdWUgZnJvbSBJU08gNDIxNy4gVGhlICJzdWJ1bml0c1ZhbHVlIgogICAgLy8gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb24gaXMgcmVkdW5kYW50IGlmIHlvdSBlbnRlciBhIHZhbHVlIGZvciB0aGlzCiAgICAvLyBoaWRlU3VidW5pdHM6ICAgICAgICAgIFNldCB0aGlzIHRvIHRydWUgaWYgeW91IGRvbid0IHdhbnQgdG8gZGlzcGxheSB0aGUgc3VidW5pdHMKICAgIC8vIHN1cHBsZW1lbnRhbFByZWNpc2lvbjogQWxsb3dzIHlvdSB0byBkaXNwbGF5IHBhcnRpYWwgc3VidW5pdHMgLiBUaGlzIGlzIGlnbm9yZWQgaWYKICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgeW91IHNwZWNpZnkgImhpZGVTdWJ1bml0cz10cnVlIgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICBmb3JtYXRNb25leTogZnVuY3Rpb24gZm9ybWF0TW9uZXkodmFsdWUsIGxvY2FsZSwgY3VycmVuY3lDb2RlLCBzdWJ1bml0c1ZhbHVlLCBzdWJ1bml0c1RvVW5pdCwgaGlkZVN1YnVuaXRzLCBzdXBwbGVtZW50YWxQcmVjaXNpb24pIHsKICAgICAgdmFyIHJldCA9IDA7CgogICAgICBpZiAoTnVtYmVyLmlzRmluaXRlKHZhbHVlKSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICB2YXIgbnVtRm9ybWF0ID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSwgewogICAgICAgICAgICBzdHlsZTogJ2N1cnJlbmN5JywKICAgICAgICAgICAgY3VycmVuY3k6IGN1cnJlbmN5Q29kZQogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgb3B0aW9ucyA9IG51bUZvcm1hdC5yZXNvbHZlZE9wdGlvbnMoKTsKICAgICAgICAgIHZhciBmcmFjdGlvbl9kaWdpdHMgPSBvcHRpb25zLm1pbmltdW1GcmFjdGlvbkRpZ2l0czsKCiAgICAgICAgICBpZiAoc3VidW5pdHNUb1VuaXQgPiAxKSB7CiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgLyBzdWJ1bml0c1RvVW5pdDsKICAgICAgICAgIH0gZWxzZSBpZiAoc3VidW5pdHNWYWx1ZSA9PSB0cnVlKSB7CiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgLyBNYXRoLnBvdygxMCwgb3B0aW9ucy5taW5pbXVtRnJhY3Rpb25EaWdpdHMpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChoaWRlU3VidW5pdHMgPT0gdHJ1ZSkgewogICAgICAgICAgICBudW1Gb3JtYXQgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG9jYWxlLCB7CiAgICAgICAgICAgICAgc3R5bGU6ICdjdXJyZW5jeScsCiAgICAgICAgICAgICAgY3VycmVuY3k6IGN1cnJlbmN5Q29kZSwKICAgICAgICAgICAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IDAsCiAgICAgICAgICAgICAgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIGlmIChzdXBwbGVtZW50YWxQcmVjaXNpb24gPiAwKSB7CiAgICAgICAgICAgIG51bUZvcm1hdCA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIHsKICAgICAgICAgICAgICBzdHlsZTogJ2N1cnJlbmN5JywKICAgICAgICAgICAgICBjdXJyZW5jeTogY3VycmVuY3lDb2RlLAogICAgICAgICAgICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogb3B0aW9ucy5taW5pbXVtRnJhY3Rpb25EaWdpdHMgKyBzdXBwbGVtZW50YWxQcmVjaXNpb24sCiAgICAgICAgICAgICAgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiBvcHRpb25zLm1heGltdW1GcmFjdGlvbkRpZ2l0cyArIHN1cHBsZW1lbnRhbFByZWNpc2lvbgogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXQgPSBudW1Gb3JtYXQuZm9ybWF0KHZhbHVlKTsKICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgIHJldCA9IGVyci5tZXNzYWdlOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICByZXQgPSAnI05hTiEnOwogICAgICB9CgogICAgICByZXR1cm4gcmV0OwogICAgfQogIH0KfTs="},{"version":3,"sources":["MoneyFormat.vue"],"names":[],"mappings":";;;;;;;;;;;AAUA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA,MADA;AAEA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAFA;AAMA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KANA;AAUA,IAAA,qBAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAVA;AAcA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAdA;AAkBA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAlBA;AAsBA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAtBA,GADA;AA4BA,EAAA,OAAA,EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,WAAA,EAAA,qBAAA,KAAA,EACA,MADA,EAEA,YAFA,EAGA,aAHA,EAIA,cAJA,EAKA,YALA,EAMA,qBANA,EAMA;AACA,UAAA,GAAA,GAAA,CAAA;;AACA,UAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,EAAA;AACA,YAAA;AACA,cAAA,SAAA,GAAA,IAAA,IAAA,CAAA,YAAA,CAAA,MAAA,EAAA;AAAA,YAAA,KAAA,EAAA,UAAA;AAAA,YAAA,QAAA,EAAA;AAAA,WAAA,CAAA;AACA,cAAA,OAAA,GAAA,SAAA,CAAA,eAAA,EAAA;AACA,cAAA,eAAA,GAAA,OAAA,CAAA,qBAAA;;AACA,cAAA,cAAA,GAAA,CAAA,EAAA;AACA,YAAA,KAAA,GAAA,KAAA,GAAA,cAAA;AACA,WAFA,MAGA,IAAA,aAAA,IAAA,IAAA,EAAA;AACA,YAAA,KAAA,GAAA,KAAA,YAAA,EAAA,EAAA,OAAA,CAAA,qBAAA,CAAA;AACA;;AACA,cAAA,YAAA,IAAA,IAAA,EAAA;AACA,YAAA,SAAA,GAAA,IAAA,IAAA,CAAA,YAAA,CAAA,MAAA,EAAA;AAAA,cAAA,KAAA,EAAA,UAAA;AAAA,cAAA,QAAA,EAAA,YAAA;AAAA,cAAA,qBAAA,EAAA,CAAA;AAAA,cAAA,qBAAA,EAAA;AAAA,aAAA,CAAA;AACA,WAFA,MAGA,IAAA,qBAAA,GAAA,CAAA,EAAA;AACA,YAAA,SAAA,GAAA,IAAA,IAAA,CAAA,YAAA,CAAA,MAAA,EAAA;AAAA,cAAA,KAAA,EAAA,UAAA;AACA,cAAA,QAAA,EAAA,YADA;AAEA,cAAA,qBAAA,EAAA,OAAA,CAAA,qBAAA,GAAA,qBAFA;AAGA,cAAA,qBAAA,EAAA,OAAA,CAAA,qBAAA,GAAA;AAHA,aAAA,CAAA;AAIA;;AACA,UAAA,GAAA,GAAA,SAAA,CAAA,MAAA,CAAA,KAAA,CAAA;AACA,SApBA,CAqBA,OAAA,GAAA,EAAA;AACA,UAAA,GAAA,GAAA,GAAA,CAAA,OAAA;AACA;AACA,OAzBA,MA0BA;AACA,QAAA,GAAA,GAAA,OAAA;AACA;;AACA,aAAA,GAAA;AACA;AArDA;AA5BA,CAAA","sourcesContent":["<template>\n  <div class=money_format>\n    {{formatMoney(value, locale, currencyCode, \n      subunitsValue,\n      subunitsToUnit,\n      hideSubunits,\n      supplementalPrecision)}}\n  </div>\n</template>\n<script>\n  export default {\n    props: {\n      value: Number,\n      locale: {\n        type: String,\n        default: 'en'\n      },\n      currencyCode: {\n        type: String,\n        default: 'USD'\n      },\n      supplementalPrecision: {\n        type: Number,\n        default: 0\n      },\n      subunitsValue: {\n        type: Boolean,\n        default: false\n      },\n      subunitsToUnit: {\n        type: Number,\n        default: 1\n      },\n      hideSubunits: {\n        type: Boolean,\n        default: false\n      }\n    },\n    methods: {\n      /////////////////////////////////////////////////////////////////////\n      // Format money based on integer or floating input\n      // ===============================================\n      // Possible inputs are:\n      // value:                 Numerical input (required)\n      // locale:                Language and country information, such as 'en' or 'en-US'\n      // currencyCode:          3-character cdde from ISO 4217\n      // subunitsValue:         Value is denominated in subunits, such as cents\n      // subunitsToUnits:       Overrides the minor unit value from ISO 4217. The \"subunitsValue\"\n      //                        option is redundant if you enter a value for this\n      // hideSubunits:          Set this to true if you don't want to display the subunits\n      // supplementalPrecision: Allows you to display partial subunits . This is ignored if\n      //                        you specify \"hideSubunits=true\"\n      /////////////////////////////////////////////////////////////////////\n      formatMoney: function(value, \n                            locale, \n                            currencyCode, \n                            subunitsValue, \n                            subunitsToUnit,\n                            hideSubunits, \n                            supplementalPrecision) {\n        let ret = 0;\n        if (Number.isFinite(value)) {\n          try {\n            let numFormat = new Intl.NumberFormat(locale, { style: 'currency', currency: currencyCode });\n            let options = numFormat.resolvedOptions();\n            let fraction_digits = options.minimumFractionDigits;\n            if (subunitsToUnit > 1) {\n              value = value/subunitsToUnit;\n            }\n            else if (subunitsValue == true) {\n              value = value/10 ** options.minimumFractionDigits;\n            }\n            if (hideSubunits == true) {\n              numFormat = new Intl.NumberFormat(locale, { style: 'currency', currency: currencyCode, minimumFractionDigits: 0 , maximumFractionDigits: 0 });\n            }\n            else if (supplementalPrecision > 0) {\n              numFormat = new Intl.NumberFormat(locale, { style: 'currency', \n                currency: currencyCode, \n                minimumFractionDigits: options.minimumFractionDigits + supplementalPrecision , \n                maximumFractionDigits: options.maximumFractionDigits + supplementalPrecision });\n            }\n            ret = numFormat.format(value);\n          }\n          catch (err) {\n            ret = err.message;\n          }\n        }\n        else {\n          ret = '#NaN!';\n        }\n        return ret;\n      }\n    }\n  }\n</script>\n"],"sourceRoot":"node_modules/vue-money-format/src/components"}]}