{"remainingRequest":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-money-format/src/components/MoneyFormat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-money-format/src/components/MoneyFormat.vue","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogewogICAgdmFsdWU6IE51bWJlciwKICAgIGxvY2FsZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdlbicKICAgIH0sCiAgICBjdXJyZW5jeUNvZGU6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnVVNEJwogICAgfSwKICAgIHN1cHBsZW1lbnRhbFByZWNpc2lvbjogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDAKICAgIH0sCiAgICBzdWJ1bml0c1ZhbHVlOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgc3VidW5pdHNUb1VuaXQ6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAxCiAgICB9LAogICAgaGlkZVN1YnVuaXRzOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgIC8vIEZvcm1hdCBtb25leSBiYXNlZCBvbiBpbnRlZ2VyIG9yIGZsb2F0aW5nIGlucHV0CiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gUG9zc2libGUgaW5wdXRzIGFyZToKICAgIC8vIHZhbHVlOiAgICAgICAgICAgICAgICAgTnVtZXJpY2FsIGlucHV0IChyZXF1aXJlZCkKICAgIC8vIGxvY2FsZTogICAgICAgICAgICAgICAgTGFuZ3VhZ2UgYW5kIGNvdW50cnkgaW5mb3JtYXRpb24sIHN1Y2ggYXMgJ2VuJyBvciAnZW4tVVMnCiAgICAvLyBjdXJyZW5jeUNvZGU6ICAgICAgICAgIDMtY2hhcmFjdGVyIGNkZGUgZnJvbSBJU08gNDIxNwogICAgLy8gc3VidW5pdHNWYWx1ZTogICAgICAgICBWYWx1ZSBpcyBkZW5vbWluYXRlZCBpbiBzdWJ1bml0cywgc3VjaCBhcyBjZW50cwogICAgLy8gc3VidW5pdHNUb1VuaXRzOiAgICAgICBPdmVycmlkZXMgdGhlIG1pbm9yIHVuaXQgdmFsdWUgZnJvbSBJU08gNDIxNy4gVGhlICJzdWJ1bml0c1ZhbHVlIgogICAgLy8gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb24gaXMgcmVkdW5kYW50IGlmIHlvdSBlbnRlciBhIHZhbHVlIGZvciB0aGlzCiAgICAvLyBoaWRlU3VidW5pdHM6ICAgICAgICAgIFNldCB0aGlzIHRvIHRydWUgaWYgeW91IGRvbid0IHdhbnQgdG8gZGlzcGxheSB0aGUgc3VidW5pdHMKICAgIC8vIHN1cHBsZW1lbnRhbFByZWNpc2lvbjogQWxsb3dzIHlvdSB0byBkaXNwbGF5IHBhcnRpYWwgc3VidW5pdHMgLiBUaGlzIGlzIGlnbm9yZWQgaWYKICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgeW91IHNwZWNpZnkgImhpZGVTdWJ1bml0cz10cnVlIgogICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICBmb3JtYXRNb25leTogZnVuY3Rpb24odmFsdWUsIAogICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVuY3lDb2RlLCAKICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJ1bml0c1ZhbHVlLCAKICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJ1bml0c1RvVW5pdCwKICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlU3VidW5pdHMsIAogICAgICAgICAgICAgICAgICAgICAgICAgIHN1cHBsZW1lbnRhbFByZWNpc2lvbikgewogICAgICBsZXQgcmV0ID0gMDsKICAgICAgaWYgKE51bWJlci5pc0Zpbml0ZSh2YWx1ZSkpIHsKICAgICAgICB0cnkgewogICAgICAgICAgbGV0IG51bUZvcm1hdCA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIHsgc3R5bGU6ICdjdXJyZW5jeScsIGN1cnJlbmN5OiBjdXJyZW5jeUNvZGUgfSk7CiAgICAgICAgICBsZXQgb3B0aW9ucyA9IG51bUZvcm1hdC5yZXNvbHZlZE9wdGlvbnMoKTsKICAgICAgICAgIGxldCBmcmFjdGlvbl9kaWdpdHMgPSBvcHRpb25zLm1pbmltdW1GcmFjdGlvbkRpZ2l0czsKICAgICAgICAgIGlmIChzdWJ1bml0c1RvVW5pdCA+IDEpIHsKICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS9zdWJ1bml0c1RvVW5pdDsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgaWYgKHN1YnVuaXRzVmFsdWUgPT0gdHJ1ZSkgewogICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLzEwICoqIG9wdGlvbnMubWluaW11bUZyYWN0aW9uRGlnaXRzOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGhpZGVTdWJ1bml0cyA9PSB0cnVlKSB7CiAgICAgICAgICAgIG51bUZvcm1hdCA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIHsgc3R5bGU6ICdjdXJyZW5jeScsIGN1cnJlbmN5OiBjdXJyZW5jeUNvZGUsIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMCAsIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMCB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgaWYgKHN1cHBsZW1lbnRhbFByZWNpc2lvbiA+IDApIHsKICAgICAgICAgICAgbnVtRm9ybWF0ID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSwgeyBzdHlsZTogJ2N1cnJlbmN5JywgCiAgICAgICAgICAgICAgY3VycmVuY3k6IGN1cnJlbmN5Q29kZSwgCiAgICAgICAgICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiBvcHRpb25zLm1pbmltdW1GcmFjdGlvbkRpZ2l0cyArIHN1cHBsZW1lbnRhbFByZWNpc2lvbiAsIAogICAgICAgICAgICAgIG1heGltdW1GcmFjdGlvbkRpZ2l0czogb3B0aW9ucy5tYXhpbXVtRnJhY3Rpb25EaWdpdHMgKyBzdXBwbGVtZW50YWxQcmVjaXNpb24gfSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXQgPSBudW1Gb3JtYXQuZm9ybWF0KHZhbHVlKTsKICAgICAgICB9CiAgICAgICAgY2F0Y2ggKGVycikgewogICAgICAgICAgcmV0ID0gZXJyLm1lc3NhZ2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgIHJldCA9ICcjTmFOISc7CiAgICAgIH0KICAgICAgcmV0dXJuIHJldDsKICAgIH0KICB9Cn0K"},{"version":3,"sources":["MoneyFormat.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MoneyFormat.vue","sourceRoot":"node_modules/vue-money-format/src/components","sourcesContent":["<template>\n  <div class=money_format>\n    {{formatMoney(value, locale, currencyCode, \n      subunitsValue,\n      subunitsToUnit,\n      hideSubunits,\n      supplementalPrecision)}}\n  </div>\n</template>\n<script>\n  export default {\n    props: {\n      value: Number,\n      locale: {\n        type: String,\n        default: 'en'\n      },\n      currencyCode: {\n        type: String,\n        default: 'USD'\n      },\n      supplementalPrecision: {\n        type: Number,\n        default: 0\n      },\n      subunitsValue: {\n        type: Boolean,\n        default: false\n      },\n      subunitsToUnit: {\n        type: Number,\n        default: 1\n      },\n      hideSubunits: {\n        type: Boolean,\n        default: false\n      }\n    },\n    methods: {\n      /////////////////////////////////////////////////////////////////////\n      // Format money based on integer or floating input\n      // ===============================================\n      // Possible inputs are:\n      // value:                 Numerical input (required)\n      // locale:                Language and country information, such as 'en' or 'en-US'\n      // currencyCode:          3-character cdde from ISO 4217\n      // subunitsValue:         Value is denominated in subunits, such as cents\n      // subunitsToUnits:       Overrides the minor unit value from ISO 4217. The \"subunitsValue\"\n      //                        option is redundant if you enter a value for this\n      // hideSubunits:          Set this to true if you don't want to display the subunits\n      // supplementalPrecision: Allows you to display partial subunits . This is ignored if\n      //                        you specify \"hideSubunits=true\"\n      /////////////////////////////////////////////////////////////////////\n      formatMoney: function(value, \n                            locale, \n                            currencyCode, \n                            subunitsValue, \n                            subunitsToUnit,\n                            hideSubunits, \n                            supplementalPrecision) {\n        let ret = 0;\n        if (Number.isFinite(value)) {\n          try {\n            let numFormat = new Intl.NumberFormat(locale, { style: 'currency', currency: currencyCode });\n            let options = numFormat.resolvedOptions();\n            let fraction_digits = options.minimumFractionDigits;\n            if (subunitsToUnit > 1) {\n              value = value/subunitsToUnit;\n            }\n            else if (subunitsValue == true) {\n              value = value/10 ** options.minimumFractionDigits;\n            }\n            if (hideSubunits == true) {\n              numFormat = new Intl.NumberFormat(locale, { style: 'currency', currency: currencyCode, minimumFractionDigits: 0 , maximumFractionDigits: 0 });\n            }\n            else if (supplementalPrecision > 0) {\n              numFormat = new Intl.NumberFormat(locale, { style: 'currency', \n                currency: currencyCode, \n                minimumFractionDigits: options.minimumFractionDigits + supplementalPrecision , \n                maximumFractionDigits: options.maximumFractionDigits + supplementalPrecision });\n            }\n            ret = numFormat.format(value);\n          }\n          catch (err) {\n            ret = err.message;\n          }\n        }\n        else {\n          ret = '#NaN!';\n        }\n        return ret;\n      }\n    }\n  }\n</script>\n"]}]}