{"remainingRequest":"/home/lionel/dev/carmarket/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lionel/dev/carmarket/src/views/Seller/pricing.vue?vue&type=template&id=38fe82f0&","dependencies":[{"path":"/home/lionel/dev/carmarket/src/views/Seller/pricing.vue","mtime":1579932076678},{"path":"/home/lionel/dev/carmarket/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lionel/dev/carmarket/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/lionel/dev/carmarket/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lionel/dev/carmarket/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}