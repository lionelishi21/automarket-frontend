{"remainingRequest":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/lionel/Projects/vue_app/surkeys_website/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lionel/Projects/vue_app/surkeys_website/src/views/Seller/pricing.vue?vue&type=template&id=38fe82f0&","dependencies":[{"path":"/home/lionel/Projects/vue_app/surkeys_website/src/views/Seller/pricing.vue","mtime":1578253976775},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}