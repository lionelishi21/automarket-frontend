{"remainingRequest":"/home/lionel/Projects/vue_app/jamaica_job_bank/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/lionel/Projects/vue_app/jamaica_job_bank/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/lionel/Projects/vue_app/jamaica_job_bank/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lionel/Projects/vue_app/jamaica_job_bank/src/views/Jobs/description.vue?vue&type=template&id=2787227d&","dependencies":[{"path":"/home/lionel/Projects/vue_app/jamaica_job_bank/src/views/Jobs/description.vue","mtime":1572799343965},{"path":"/home/lionel/Projects/vue_app/jamaica_job_bank/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/jamaica_job_bank/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/jamaica_job_bank/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/jamaica_job_bank/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}