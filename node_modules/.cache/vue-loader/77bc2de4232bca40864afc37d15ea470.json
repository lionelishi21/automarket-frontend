{"remainingRequest":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-location-picker/src/LocationPicker.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-location-picker/src/LocationPicker.vue","mtime":1461010775000},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lionel/Projects/vue_app/surkeys_website/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLkxvY2F0aW9uUGlja2VyLAouTG9jYXRpb25QaWNrZXJfX21hcCB7CiAgaGVpZ2h0OiAxMDAlOwp9CgouTG9jYXRpb25QaWNrZXJfX2F1dG9jb21wbGV0ZSB7CiAgcGFkZGluZzogN3B4IDE0cHg7CiAgbWFyZ2luOiAxMHB4OwogIHdpZHRoOiAzMCU7CiAgbWluLXdpZHRoOiAzMDBweDsKICBmb250LWZhbWlseTogUm9ib3RvOwogIGZvbnQtc2l6ZTogMTVweDsKICBmb250LXdlaWdodDogMzAwOwogIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOwogIGJvcmRlcjogMDsKICBib3JkZXItcmFkaXVzOiAycHggMCAwIDJweDsKICBib3gtc2hhZG93OiAwIDJweCA2cHggcmdiYSgwLCAwLCAwLCAwLjMpOwp9CgouTG9jYXRpb25QaWNrZXIgPiAuTG9jYXRpb25QaWNrZXJfX2F1dG9jb21wbGV0ZSwKLkxvY2F0aW9uUGlja2VyID4gLkxvY2F0aW9uUGlja2VyX19pbmZvLXdpbmRvdyB7CiAgZGlzcGxheTogbm9uZTsKfQo="},{"version":3,"sources":["LocationPicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4GA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"LocationPicker.vue","sourceRoot":"node_modules/vue-location-picker/src","sourcesContent":["<template>\n  <div class=\"LocationPicker\">\n    <div class=\"LocationPicker__map\" v-el:map></div>\n    <input type=\"text\" class=\"LocationPicker__autocomplete\" v-el:input/>\n    <info-window class=\"LocationPicker__info-window\" v-ref:info></info-window>\n  </div>\n</template>\n\n\n<script>\n  import InfoWindow from './InfoWindow.vue'\n\n  export default {\n    props: {\n      place: {\n        type: Object,\n        twoWay: true\n      }\n    },\n\n    data () {\n      return {\n        geocoder: null,\n        map: null,\n        marker: null,\n        infoWindow: null,\n        autocomplete: null\n      }\n    },\n\n    components: { InfoWindow },\n\n    events: {\n      'location-picker-init' (options) {\n        this.geocoder = new google.maps.Geocoder()\n\n        this.map = new google.maps.Map(this.$els.map, Object.assign({\n          center: { lat: 0, lng: 0 },\n          zoom: 3,\n          disableDefaultUI: true\n        }, options.map))\n\n        this.marker = new google.maps.Marker(Object.assign({\n          map: this.map,\n          position: this.map.getCenter(),\n          draggable: true\n        }, options.marker))\n\n        this.infoWindow = new google.maps.InfoWindow(Object.assign({\n          content: this.$refs.info.$el\n        }, options.infoWindow))\n\n        this.autocomplete = new google.maps.places.Autocomplete(this.$els.input, Object.assign({\n          types: ['geocode']\n        }, options.autocomplete))\n        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(this.$els.input)\n\n        // events\n        google.maps.event.addListenerOnce(this.map, 'idle', this.openInfoWindow)\n        this.marker.addListener('dragstart', this.closeInfoWindow)\n        this.marker.addListener('dragend', this.geocodeLocation)\n        this.autocomplete.addListener('place_changed', this.moveMarker)\n      }\n    },\n\n    methods: {\n      openInfoWindow () {\n        this.infoWindow.open(this.map, this.marker)\n      },\n\n      closeInfoWindow () {\n        this.infoWindow.close()\n      },\n\n      geocodeLocation (e) {\n        this.map.panTo(e.latLng)\n        this.$els.input.value = ''\n\n        this.geocoder.geocode({'latLng': e.latLng}, (response) => {\n          if (response && response.length > 0) {\n            this.place = response[0]\n            this.$refs.info.showAddress(this.place)\n          } else {\n            this.place = null\n            this.$refs.info.showError()\n          }\n\n          this.openInfoWindow()\n        })\n      },\n\n      moveMarker () {\n        var place = this.autocomplete.getPlace()\n        var location = place.geometry && place.geometry.location\n\n        if (location) {\n          this.place = place\n          this.map.panTo(location)\n          this.marker.setPosition(location)\n          this.$refs.info.showAddress(place)\n        }\n      }\n    }\n  }\n</script>\n\n\n<style>\n  .LocationPicker,\n  .LocationPicker__map {\n    height: 100%;\n  }\n\n  .LocationPicker__autocomplete {\n    padding: 7px 14px;\n    margin: 10px;\n    width: 30%;\n    min-width: 300px;\n    font-family: Roboto;\n    font-size: 15px;\n    font-weight: 300;\n    text-overflow: ellipsis;\n    border: 0;\n    border-radius: 2px 0 0 2px;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n  }\n\n  .LocationPicker > .LocationPicker__autocomplete,\n  .LocationPicker > .LocationPicker__info-window {\n    display: none;\n  }\n</style>\n"]}]}